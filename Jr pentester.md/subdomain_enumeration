what is subdomain enumaration?

🧠 Simple Explanation:
Subdomain enumeration is like finding all the small shops (subdomains) in a shopping mall (main domain). If the mall is example.com, then the shops might be shop.example.com, admin.example.com, etc.
🧪 Technical Definition:
Subdomain enumeration is the process of finding valid subdomains of a domain. It helps attackers or pentesters discover additional attack surfaces, especially when some subdomains are poorly secured, forgotten, or under development.

Subdomain enumeration methods?

brute force, OSINT, virtual host

What is OSINT?

Open source intelligence
SSL/TLS certificates - 
An SSL/TLS certificate is what makes websites use https:// and shows a padlock icon 🔒. It tells your browser:
"Hey, this site is secure and verified by a trusted company (Certificate Authority or CA)."
🔍 What Are Certificate Transparency (CT) Logs?
➡️ Every time a certificate is issued for a domain (like google.com or mail.example.com), the Certificate Authority (CA) adds a record of that certificate in a public log — this is called a Certificate Transparency (CT) Log.
🔎 What is crt.sh?
It’s a search engine for SSL/TLS certificates and CT Logs.
what is OSINT search engine?
Search engines like Google crawl the web and store links to billions of websites — including subdomains.
📌 Explanation:
site:*.domain.com → Search for any subdomain of domain.com.
-site:www.domain.com → Exclude the main site (www.domain.com), so we only get other subdomains.
what is sublist3r?
Sublist3r** is like a super-fast subdomain detective. Instead of manually searching sites like Google, crt.sh, VirusTotal, etc., it automatically gathers subdomains using many public sources.

What is DNS brute force?

Brute-force DNS Enumeration is like guessing the names of all the doors in a big building (the main domain), hoping to find secret or hidden rooms (subdomains) behind them.
Instead of doing it manually, we use a tool that tries hundreds or thousands of common names (like admin., dev., test., etc.) automatically to see which ones are real.
🧪 What Is It Technically?
Brute-force DNS enumeration is a technique where a tool:
Takes a wordlist (predefined list of common subdomain names).
Combines each word with the main domain (like dev.example.com, mail.example.com).
Sends DNS queries to check if the subdomain exists.
Collects the ones that give a real IP address or DNS response
 Tool Used Here: dnsrecon
dnsrecon is a DNS enumeration tool used for both passive and active subdomain discovery.
➡️ In this case, you're using it in brute-force mode, where it tries every word in a list against the target domain.

what is virtual host?

🧠 Simple Explanation:
Some subdomains are not registered in public DNS. They may exist only in:
Private/internal DNS
A developer’s /etc/hosts file (or hosts file in Windows)
These subdomains won’t be found using tools like dnsrecon or Sublist3r.
BUT — the web server might still serve them, and we can trick the server into showing them by manipulating the Host header.
🔍 What Is the Host Header?
When your browser requests a website, it tells the server what domain it wants using the Host header:
Host: www.example.com
🛠️ Attack Technique: Host Header Fuzzing with ffuf
You can use ffuf to brute-force subdomain names by placing a wordlist in the Host header, even if those subdomains aren't in DNS.
First Command: Basic Host Header Fuzzing
ffuf -w /usr/share/wordlists/SecLists/Discovery/DNS/namelist.txt \
-H "Host: FUZZ.acmeitsupport.thm" \
-u http://MACHINE_IP
BUT here is the problem
🧩 Problem:
This command will often return valid HTTP responses for every input, even if the subdomain doesn't exist. Why?
➡️ Because the default page still returns something even for invalid hosts.
✅ Solution: Filter with Response Size
Run the first command and note the most common size in the output.
Then return with -fs (filter size) to hide those common "useless" responses:
ffuf -w /usr/share/wordlists/SecLists/Discovery/DNS/namelist.txt \
-H "Host: FUZZ.acmeitsupport.thm" \
-u http://MACHINE_IP \
-fs {size}



